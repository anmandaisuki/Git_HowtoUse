//cmd command on windows
cd              移動
dir             フォルダの中身表示
cd ..           一つ戻る
mkdir           ファイルを作る


//git command

git init                          新しくリポジトリローカルに作るときの初期化

git add ファイル名　              　ステージング
git add .                       　新しく追加したファイルすべてステージング
git add ファイル名　ファイル名　    複数ファイルステージング

git reset 	addを取り消す

git commit -m "コメント"　          コメント付コミット



git remote add origin リポジトリのURL   リモートリポジトリの名前をoriginとして登録。originはリモートリポジトリの名前
git remote add aaa リポジトリのURL      リモートリポジトリの名前をaaaとして登録。
git remote -v                       登録されてるリモートリポジトリの確認


git remote rm 削除したいリポジトリ名    リモートリポジトリ名であること注意。urlじゃない。リモートリポジトリの削除。
git remote rm origin

git clone クローンしたいリポジトリのURL     リポジトリのclone. 自動的に元のリポジトリがoriginとしてremote repositoyとして登録される。

git fetch         ローカルに存在するremoteのオリジナル情報を最新のものに更新する。remoteブランチの変更をローカルに更新する。git mergeすることで、実際にローカルの内容が変更される。

git pull origin リモートレポジトリのブランチ名      リモートレポジトリのブランチをいじりたいときのコマンド。要はgit fetch + git merge。
git pull 登録したリモートレポジトリ名　リモートレポジトリのブランチ名


git push -u origin main                                         リモートリポジトリに変更を反映。ローカルレポジトリと同じ名前のブランチがリモートリポジトリに存在しなかったら、新しいブランチがリモート上に生成される。そうでなければ上書きされる。
git push -u　登録したリモートレポジトリ名　ローカルのブランチ名


git branch                                  存在するブランチの確認
git branch 作成したいbranch名               ブランチの作成
git branch -m 古いブランチ名　新しいブランチ名        ブランチの名前を変更
git branch -m 新しいブランチ名                        カレントブランチ名の変更
git checkout ブランチ名　                   ブランチの切り替え
git branch -d ブランチ名                    ブランチの削除

git merge マージしたいブランチＡ　            現在のブランチにブランチAをマージする。
流れとしてはcheckout mainでmainブランチに変更して、他のブランチをマージすることが多い。

git status              リポジトリの状態を表示（現在ブランチとか、ディレクトリとか）
git log                  コミット履歴を表示
git log -n 10            直近10件のコミット履歴を表示。-nコマンドで表示件数を指定できる。

git grep "検索単語"         "検索単語"を含むファイルを表示。便利そう

git fetch 	リモートの変更をローカルに取り込む。既にローカルにリポジトリクローンしていて、リモートが変更になったとき。

//cloneしたリポジトリを別のリポジトリにpushする流れ
git clone リポジトリのURL
git remote -v							
git remote set-url origin push先にしたいリポジトリのURL 	//originというリモートリポジトリのアドレスを変更してる。
git remote -v
git push origin main	//originにローカルのmainブランチをpushしてる。

//tag付けしてpushする方法。
タグはコミットの名前。なのでタグの中にブランチ情報とコミット情報が含まれる。コミットに対してタグを作成して、タグをPushする。事前にタグ付けされたコミットがされたブランチをPushしておかないと、紐づいたコミットがないよっエラーになる。

git tag タグ名 				//現在のブランチの最新コミットにタグがつく。
git tag -a タグ名 -m 'コメント'		//コメントつきタグ
git push origin タグがついたブランチ	//タグがついたブランチは事前にpushしとかないといけないっぽい。
git push origin タグ名			//リモートにタグを反映してpushする。
git tag 				//タグ一覧表示。
git show タグ名				//各タグの詳細情報確認。誰がコミットしたのか、いつコミットしたのか、コミットIDなど。
git tag -d タグ名      //ローカルのタグ削除
git push origin --delete タグ名　//リモートのタグ削除

//git初回のuser登録方法　大体の場合、--globalプロパティつけるとgitすべてのリポジトリに適応されるので、今後登録する必要なし。←--globalいらないかも。
--globalなしだとdefaultになるので、今後リポジトリごとにconfigしたくないなら--globalつけないほうがいいかも。
//ユーザー登録しておかないとコミットとかできない。コミット情報に誰がコミットしたか載せられないから。
git config --global user.email "メールアドレス"
git config --global user.name "ユーザー名" 
//githubとの紐づけは初回push時にプラウザで行う。

//gitの設定の確認
git config -l

//特定のコミットまで戻る方法。checkoutで特定コミットやタグに戻るときに、-bオプションを指定しないと、HeadはDetached状態となる。（どこのブランチにもいない状態。）
//なので、元の状態に戻りたい場合はgit checkout 元のブランチ(masterやmain)　をすれば、checkout前に戻れる。
git checkout HEAD ファイル名       //最後にコミットしたとこまで戻す 
git checkout タグ名 ファイル名      //タグ付けされてる時点のコミットまで戻る。
git checkout commitID              //ファイル名を書かないとコミットしたときのフォルダ状態にもどる。
//resetコマンドはローカル内のコミット（一度もリモートに上げてない）に対してのみ使うこと。一度リモートに渡ったコミットに対してresetすると、コミット履歴がおかしくなる。
  git reset --hard                   //ファイル単位ではなく、リポジトリ毎、最新のコミット時点に戻す。
  git reset --hard HEAD~              //リポジトリ毎、1つ前のcommit状態に戻る。
git checkout -b 新しいブランチ名 タグ名    //タグのコミット時の新しいブランチを作成。

//reset関連 指定したコミットまで戻る。HEAD^で一つ前のコミットまで、HEADで最新のコミットまで戻る。
//HEAD^は直前コミットという意味らしい。HEAD^^で2つ前のコミット。HEAD~で一つ前。HEAD~2で２つ前。HEAD~10で10個前のコミットになる。
//Headは現在の先頭コミットってことだと思う。
//--soft   コミットだけ戻す。ステージングそのまま。　
//--mixed　コミットを戻したときにステージングもコミット時に戻す。コミットしたときにステージング空になるので、ステージングがリセットされるってこと。
//--hard　 コミットを戻したときに、ステージング、やディレクトリの状態もコミット時に戻す。つまりファイルの変更も消えて、完全にコミット時に戻る。

git reset --soft HEAD^  //一つ前のコミットのみ消して、ディレクトリの中身はそのまま。つまりコミットのみ一つ前に戻り、残りはそのまま。
git reset --mixed HEAD　//最新のHEADのコミットまで戻る。このときにステージングも最新のコミット時まで戻る。つまりステージングaddの取り消し。addリセットしたいとき用。
git reset --hard HEAD   //最新のコミットのときの状態に完全に戻す。コミット後の変更内容はすべて消えて、コミット時に元通り。
git reset --hard ORIG_HEAD  //resetの取り消し。ミスってresetしたとき用。

//他のアカウントのリポジトリに参加するとき
1.github上でforkする。（ 参加したいリポジトリの画面いって、右上らへん（starの横）のforkを押して、自分のリモートレポジトリにコピーする。
2.forkしたリモートレポジトリをclone
3.変更してリモートにpush
4.github上で元のレポジトリ（他アカウント）にpull request。（pull requests画面でnew pull request>margeしたい自分のブランチとマージ先の相手方のブランチを指定。）

//git pushでアクセストークンいるとき
1. githubのsetting > developer setting > personal access tokens > generate new tokens でレポジトリに対するトークンを作成。
2. 作成されたトークンをコピー
3.git push の時に要求されusernameでユーザー名をpasswordでコピーしたトークンを入力

// conflictがおきたとき
conflictはmerge(pullはfetch+mergeなのでpullも)するときに起きうる。merge(pull)が取り消されたわけじゃないので、conflictを解消して、再コミットする必要がある。
同じファイルの同じ箇所を編集したときにconfilictと判定されるので、異なるファイルや異なる場所なら起きないかも。ただ異なる場所をどういうふうに判定するかわからないので、同じファイルは編集しない方がいいかも。
clone（あるいは）したリポジトリをmergeするときに、元のオリジナルがすでに更新されていると発生する。
オリジナルの方の変更とcloneした方の変更どちらが正しいか分からない状態。

  //conflict起きたときのテキストに表示されるやつ

    <<<<<HEAD  
    現在ブランチでの変更点
    =====      
    merge先のブランチでの変更点
 　 >>>>>merge先ブランチ名

//conflictの解消方法
1.テキスト内に表示された<<<HEADとか===とかを削除して、残したい変更のみにする。
2.git add でステージング
3.git commit -m "" でコミット

//pull requestはそもそもconflictしてたら発行できない？
  一度、元の最新リポジトリと同期してから、pull requestを発行する。
